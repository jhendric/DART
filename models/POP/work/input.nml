&perfect_model_obs_nml
   start_from_restart    = .true.,
   output_restart        = .true.,
   async                 = 4,
   init_time_days        = -1,
   init_time_seconds     = -1,
   first_obs_days        = -1,
   first_obs_seconds     = -1,
   last_obs_days         = -1,
   last_obs_seconds      = -1,
   output_interval       = 1,
   restart_in_file_name  = "perfect_ics",
   restart_out_file_name = "perfect_restart",
   obs_seq_in_file_name  = "obs_seq.in",
   obs_seq_out_file_name = "obs_seq.perfect",
   adv_ens_command       = "./advance_model.csh"  /

#  trace_execution          = .true.,
&filter_nml
   async                    = 4,
   adv_ens_command          = "./advance_model.csh",
   ens_size                 = 20,
   start_from_restart       = .true.,
   output_restart           = .true.,
   obs_sequence_in_name     = "obs_seq.out",
   obs_sequence_out_name    = "obs_seq.final",
   restart_in_file_name     = "filter_ics",
   restart_out_file_name    = "filter_restart",
   init_time_days           = 144270,
   init_time_seconds        =  43200,
   first_obs_days           = 144270,
   first_obs_seconds        =      0,
   last_obs_days            = 144270,
   last_obs_seconds         =  43200,
   num_output_state_members = 20,
   num_output_obs_members   = 20,
   output_interval          = 1,
   num_groups               = 1,
   input_qc_threshold       =  4.0,
   outlier_threshold        = -1.0,
   output_forward_op_errors = .false.,
   output_timestamps        = .false.,
   output_inflation         = .true.,

   inf_flavor                  = 0,                       0,
   inf_initial_from_restart    = .false.,                 .false.,
   inf_sd_initial_from_restart = .false.,                 .false.,
   inf_output_restart          = .true.,                  .true.,
   inf_deterministic           = .true.,                  .true.,
   inf_in_file_name            = 'prior_inflate_ics',     'post_inflate_ics',
   inf_out_file_name           = 'prior_inflate_restart', 'post_inflate_restart',
   inf_diag_file_name          = 'prior_inflate_diag',    'post_inflate_diag',
   inf_initial                 = 1.0,                     1.0,
   inf_sd_initial              = 0.0,                     0.0,
   inf_damping                 = 1.0,                     1.0,
   inf_lower_bound             = 1.0,                     1.0,
   inf_upper_bound             = 1000000.0,               1000000.0,
   inf_sd_lower_bound          = 0.0,                     0.0
/

&smoother_nml
   num_lags              = 0,
   start_from_restart    = .false.,
   output_restart        = .false.,
   restart_in_file_name  = 'smoother_ics',
   restart_out_file_name = 'smoother_restart'  /

# cutoff of 0.03 (radians) is about 200km
&assim_tools_nml
   filter_kind                     = 1,
   cutoff                          = 0.03,
   sort_obs_inc                    = .true.,
   spread_restoration              = .false.,
   sampling_error_correction       = .false.,
   adaptive_localization_threshold = -1,
   print_every_nth_obs             = 0  /

&ensemble_manager_nml
   single_restart_file_in  = .true.,
   single_restart_file_out = .true.,
   perturbation_amplitude  = 0.2  /

&cov_cutoff_nml
   select_localization = 1  /

&reg_factor_nml
   select_regression    = 1,
   input_reg_file       = "time_mean_reg",
   save_reg_diagnostics = .false.,
   reg_diagnostics_file = "reg_diagnostics"  /

&obs_sequence_nml
   write_binary_obs_sequence = .false.  /

&obs_kind_nml
   assimilate_these_obs_types = 'SALINITY',
                                'TEMPERATURE',
                                'U_CURRENT_COMPONENT',
                                'V_CURRENT_COMPONENT',
                                'SEA_SURFACE_HEIGHT',
                                'ARGO_U_CURRENT_COMPONENT',
                                'ARGO_V_CURRENT_COMPONENT',
                                'ARGO_SALINITY',
                                'ARGO_TEMPERATURE',
                                'ADCP_U_CURRENT_COMPONENT',
                                'ADCP_V_CURRENT_COMPONENT',
                                'ADCP_SALINITY',
                                'ADCP_TEMPERATURE',
                                'FLOAT_SALINITY',
                                'FLOAT_TEMPERATURE',
                                'DRIFTER_U_CURRENT_COMPONENT',
                                'DRIFTER_V_CURRENT_COMPONENT',
                                'DRIFTER_SALINITY',
                                'DRIFTER_TEMPERATURE',
                                'GLIDER_U_CURRENT_COMPONENT',
                                'GLIDER_V_CURRENT_COMPONENT',
                                'GLIDER_SALINITY',
                                'GLIDER_TEMPERATURE',
                                'MOORING_U_CURRENT_COMPONENT',
                                'MOORING_V_CURRENT_COMPONENT',
                                'MOORING_SALINITY',
                                'MOORING_TEMPERATURE',
                                'SATELLITE_MICROWAVE_SST',
                                'SATELLITE_INFRARED_SST',
                                'SATELLITE_SSH',
                                'SATELLITE_SSS'  /

&preprocess_nml
    input_obs_kind_mod_file = '../../../obs_kind/DEFAULT_obs_kind_mod.F90',
   output_obs_kind_mod_file = '../../../obs_kind/obs_kind_mod.f90',
     input_obs_def_mod_file = '../../../obs_def/DEFAULT_obs_def_mod.F90',
    output_obs_def_mod_file = '../../../obs_def/obs_def_mod.f90',
   input_files              = '../../../obs_def/obs_def_ocean_mod.f90'  /

&assim_model_nml
   write_binary_restart_files = .true.  /

&model_nml
   calendar                     = 'noleap', 
   assimilation_period_days     = 1, 
   assimilation_period_seconds  = 0, 
   longitude_wrap               = .true.,
   horiz_grid_input_file        = 'horiz_grid.x1.nc',
   topography_input_file        = 'topography.x1.nc',
   vert_grid_input_file         = 'vert_grid.x1',
   model_perturbation_amplitude = 0.2, 
   output_state_vector          = .false.,
 /

&pop_to_dart_nml
   pop_to_dart_restart_file =  'pop.r.x1A.19000102',
   pop_to_dart_output_file  = 'assim_model_state_ud',
 /

&dart_to_pop_nml
   dart_to_pop_input_file   = 'assim_model_state_ic',
   dart_to_pop_restart_file = 'my_pop_restart_file',
 /


&location_nml
   horiz_dist_only             = .true.,
   vert_normalization_pressure = 100000.0, 
   vert_normalization_height   = 10000.0,
   vert_normalization_level    = 20.0,
   approximate_distance        = .false.,
   nlon                        = 71,
   nlat                        = 36,
   output_box_info             = .true.  /

&utilities_nml
   TERMLEVEL = 1,
   module_details = .true.,
   logfilename = 'dart_log.out',
   nmlfilename = 'dart_log.nml'  /

&restart_file_tool_nml
   input_file_name              = "filter_restart",
   output_file_name             = "filter_updated_restart",
   ens_size                     = 1,
   single_restart_file_in       = .true.,
   single_restart_file_out      = .true.,
   write_binary_restart_files   = .true.,
   overwrite_data_time          = .false.,
   new_data_days                = -1,
   new_data_secs                = -1,
   input_is_model_advance_file  = .false.,
   output_is_model_advance_file = .false.,
   overwrite_advance_time       = .false.,
   new_advance_days             = -1,
   new_advance_secs             = -1,
   gregorian_cal                = .true.  /

&obs_sequence_tool_nml
   num_input_files = 7,
   filename_seq    = '../observations/ssh_pseudo.obs_seq.out',
                     '../observations/gliders_t_pseudo.obs_seq.out',
                     '../observations/drifters_u_pseudo.obs_seq.out',
                     '../observations/drifters_v_pseudo.obs_seq.out',
                     '../observations/adcp_u_pseudo.obs_seq.out',
                     '../observations/adcp_v_pseudo.obs_seq.out',
                     '../observations/tmi_pseudo.obs_seq.out',
   filename_out    = 'obs_seq.out',
   gregorian_cal   = .true.  /

# other possible obs tool namelist items:
#
# print out how many obs of each type are in the file:
#   print_only        = .true.,
#
# keep only obs in time period:
#   first_obs_days    = -1,
#   first_obs_seconds = -1,
#   last_obs_days     = -1,
#   last_obs_seconds  = -1,
#
# keep only obs in a bounding box:
#   min_lat           = -90.0,
#   max_lat           =  90.0,
#   min_lon           =   0.0,
#   max_lon           = 360.0,
#
# keep only the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT',
#   keep_types         = .true.,
#
# remove the U and V radiosonde winds:
#   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT',
#                        'RADIOSONDE_V_WIND_COMPONENT',
#   keep_types         = .false.,
#
# keep only observations with a DART QC of 0:
#   qc_metadata        = 'Dart quality control',
#   min_qc             = 0,
#   max_qc             = 0,
#
# keep only radiosonde temp obs between 250 and 300 K:
#   copy_metadata      = 'NCEP BUFR observation',
#   copy_type          = 'RADIOSONDE_TEMPERATURE',
#   min_copy           = 250.0,
#   max_copy           = 300.0,
#

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, Inf]

&obs_diag_nml
   obs_sequence_name = 'obs_seq.final',
   first_bin_center =  1996, 1, 1,12, 0, 0 ,
   last_bin_center  =  1996, 1,14,12, 0, 0 ,
   bin_separation   =     0, 0, 1, 0, 0, 0 ,
   bin_width        =     0, 0, 1, 0, 0, 0 ,
   time_to_skip     =     0, 0, 0, 0, 0, 0 ,
   max_num_bins     = 1000,
   rat_cri            = 3.0,
   input_qc_threshold = 4.0,
   Nregions   = 3,
   lonlim1    = 260.0, 270.0, 260.0,
   lonlim2    = 310.0, 310.0, 300.0,
   latlim1    =   0.0,   0.0,  20.0,
   latlim2    =  40.0,  20.0,  40.0,
   reg_names  = 'Gulf & Caribbean', 'Caribbean', 'Gulf of Mexico',
   print_mismatched_locs = .false.,
   print_obs_locations   = .false.,
   verbose               = .true.,
   hlevel =  -2.50185,   -7.7967, -13.72595, -20.40305,  -27.9614, 
            -36.55765,  -46.3757,  -57.6311, -70.57615,  -85.5057,
            -102.7636, -122.7502, -145.9296, -172.8393, -204.0984, 
            -240.4174, -282.6075, -331.5891, -388.3994, -454.1974, 
            -530.2654, -618.0071, -718.9376, -834.6679, -966.8794, 
            -1117.289, -1287.607, -1479.480, -1694.436, -1933.820, 
            -2198.734, -2489.986, -2808.042, -3153.009, -3524.622, 
            -3922.264, -4344.997, -4791.606, -5260.660, -5750.303   /

