This file describes how to compile and run the NCEP cwordsh utility,
which is described in detail at
http://www.ncep.noaa.gov/NCO/DMQAB/Decoders/BUFRLIB/cwordsh/,
and whose usage is governed by the terms and conditions of the disclaimer
viewable at http://www.nws.noaa.gov/disclaimer.html

1.  **This step has alread been completed if the "install.sh" script
    has been run. (See the README file up one directory) ** 
    If you haven't already done so, download, compile, and build the NCEP
    BUFRLIB software on the same system upon which you plan to run cwordsh.
    The BUFRLIB software is available via the web page
    http://www.ncep.noaa.gov/NCO/DMQAB/Decoders/BUFRLIB/
    
2.  Edit the file "cwordsh.make" and set the variable 
    BUFRLIB to point to the location of the
    compiled BUFRLIB archive library from step #1.  **This variable has
    been preset to point to the archive library created during the 
    execution of the "install.sh" script. **

2.  Edit the file "cwordsh.make" and set the variable CPLAT to the name of
    the type of system upon which you plan to run.  This variable is used to
    set the names of the FORTRAN and C compilers for the system as
    well as to appropriately initialize the FORTRAN <-> C interface, which
    is not standard across the multitude of existing UNIX platform types.
    For example, some systems require a trailing underscore to be appended
    to a FORTRAN routine name when calling it from a C function, while others 
    require the name to be capitalized, and still others require no special
    changes at all.  The file "cwordsh.make" contains pre-included logic for
    several of the more popular system types such as sgi, aix, hp, etc.,
    in which case the variable CPLAT needs only to be set to the relevant type.
    However, if you are working on a system which isn't already represented in
    the file, then you need to add the appropriate logic for your system
    so that the necessary FORTRAN routines can be properly called from within C,
    and you also need to supply the names of the FORTRAN and C compilers for
    your local system.  

3.  Run the command "./cwordsh.make" to build the executable "cwordsh.x"
    within the current directory.  If you wish for the executable to be
    written out to a different location, you may modify the variable CWRD
    within the "cwordsh.make" script.

4.  The script "cwordsh" will now run the "cwordsh.x" executable that was
    created in step #3.  The script takes three arguments, the first of which
    is the string "block" or "unblk", depending on whether the script is to
    be used to block or unblock a file, respectively.  The second argument
    is the input file to be blocked or unblocked, and the third argument is
    the name of the output file that is the final unblocked or blocked copy
    of the input file, depending on the case!  Note that, if you previously
    modified the variable CWRD within the script "cwordsh.make"
    (within step #3), then it must be likewise modified within this
    "cwordsh" script as well!
