# template for unspecified PGI f90 Compiler
#
# Data Assimilation Research Testbed -- DART
# Copyright 2004, 2005, Data Assimilation Initiative, University Corporation for Atmospheric Research
# Licensed under the GPL -- www.gpl.org/licenses/gpl.html
#
# <next two lines are maintained by CVS, please do not edit>
# $Id$
# $Name$
#
# typical use with mkmf
# mkmf -t mkmf.template.xxxx -c"-Duse_netCDF" ...
#
# NETCDF and LIBS needs to be customized for your site
#
# FFLAGS   useful for benchmarking
#    -Ktrap=fp               trap floating point exceptions and EXIT
#    -pc 64                  use 64bit register precision (useful for comparison)
#    -v                      verbose compile
#    -O0                     no optimization
#
# FFLAGS   useful for speed
#    -fastsse                'general optimal flags for SSE, SSE2 chipsets'
#    -Minline                
#    -Knoieee                don't perform IEEE arithmetic (faster, see note) 
#    -Minfo=loop,inline      emit info about loop optmztn and inlining to stderr
#
# NOTE: 'noieee' "... produces results that differ from the correctly rounded 
#                 result by no more than 3 units in the last place."
#
FC = pgf90
LD = pgf90
CPPFLAGS =
LIST = -Mlist
NETCDF = /usr/local/netcdf
FFLAGS = -r8 -Ktrap=fp -pc 64 -v -I$(NETCDF)/include
LIBS = -L$(NETCDF)/lib -lnetcdf -L/usr/local/udunits-1.11.7/lib -ludunits
LDFLAGS = $(LIBS)

# you should never need to change any lines below.

# this makefile template recognizes fortran sourcefiles with extensions
# .f, .f90, .F, .F90. Given a sourcefile <file>.<ext>, where <ext> is one of
# the above, this provides a number of default actions:

# make <file>.lst	create a compiler listing
# make <file>.o		create an object file
# make <file>.s		create an assembly listing
# make <file>.x		create an executable file, assuming standalone
#			source

# make <file>.i		create a preprocessed file (only for .F and .F90
#			extensions)

# The macro TMPFILES is provided to slate files like the above for removal.

RM = rm -f
SHELL = /bin/csh
TMPFILES = *.i *.lst *.mod *.s

.SUFFIXES: .F .F90 .H .f .f90 .h .i .lst .o .s .x

.f.lst:
	$(FC) $(FFLAGS) -c $(LIST) $*.f
.f.o:
	$(FC) $(FFLAGS) -c $*.f
.f.s:
	$(FC) $(FFLAGS) -S $*.f
.f.x:
	$(FC) $(FFLAGS) -o $*.x $*.f *.o $(LDFLAGS)
.f90.lst:
	$(FC) $(FFLAGS) -c $(LIST) $*.f90
.f90.o:
	$(FC) $(FFLAGS) -c $*.f90
.f90.s:
	$(FC) $(FFLAGS) -c -S $*.f90
.f90.x:
	$(FC) $(FFLAGS) -o $*.x $*.f90 *.o $(LDFLAGS)
.F.lst:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c $(LIST) $*.F
.F.f:
	$(FC) $(CPPDEFS) $(CPPFLAGS) -F $*.F > $*.f
.F.i:
	$(FC) $(CPPDEFS) $(CPPFLAGS) -E $*.F > $*.i
.F.o:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c $*.F
.F.s:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -S $*.F
.F.x:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -o $*.x $*.F *.o $(LDFLAGS)
.F90.lst:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c $(LIST) $*.F90
.F90.f90:
	$(FC) $(CPPDEFS) $(CPPFLAGS) -F $*.F90 > $*.f90
.F90.i:
	$(FC) $(CPPDEFS) $(CPPFLAGS) -E $*.F90 > $*.i
.F90.o:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c $*.F90
.F90.s:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -c -S $*.F90
.F90.x:
	$(FC) $(CPPDEFS) $(CPPFLAGS) $(FFLAGS) -o $*.x $*.F90 *.o $(LDFLAGS)
