#!/bin/sh
#
# DART software - Copyright 2004 - 2013 UCAR. This open source software is
# provided by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# $Id$

# usage: fixsystem [ -gfortran | -not_gfortran ]
#
# in two DART source code files in this directory we depend on using 
# the system() function to run a shell script and wait for the shell 
# exit code, e.g.:  rc = system("/bin/date")
#
# for all compilers, except gfortran, an interface block is required
# to define the integer return from the system function.  however
# the gfortran compiler gives an error if this block is defined.
# this script tries to comment in and out this interface block by
# looking for a pair of specially formatted comment lines and
# commenting in (or out) all the lines between those comment 
# delimiter lines.
#
# the original usage of this script was without any arguments. 
# it swapped the state of the comment block; if it was commented out
# it removed the comment characters, or if the code was enabled
# it added comment chars.  it still has this backwards-compatible
# behavior but now it also takes a single optional argument
# which must be one of:  -gfortran   or -not_gfortran
# it ensures the interface block is in the correct configuration
# for the given compiler.

for f in mpi_utilities_mod.f90 null_mpi_utilities_mod.f90
do

  # figure out what state the source file is in before we start
  export bline=`fgrep SYSTEM_BLOCK_EDIT ${f} | grep START | head -n 1`
  if [[ "`echo $bline | grep COMMENTED_OUT`" != ""  ]]; then
    #echo Is no interface block for system in ${f}
    export before=out
  elif [[ "`echo $bline | grep COMMENTED_IN`" != ""  ]]; then
    #echo Interface block is present in ${f}
    export before=in
  else
    echo ${f} not found, or does not have the right comment string to
    echo automatically change the system interface block via script.
    echo Please restore original file from the subversion repository
    echo and try again.
    exit 1
  fi

  if [[ $# == 0 ]]; then
    # no args given, swap to the other configuration
    if [[ $before == out ]]; then
      export todo=in
    elif [[ $before == in ]]; then
      export todo=out
    else
      echo Internal error; should not happen.  Contact DART support.
      exit 1
    fi

  elif [[ $# == 1 ]]; then
    # single arg: must be either -gfortran or -not_gfortran
    if [[ "$1" == -gfortran ]]; then
      export todo=out
    elif [[ "$1" == -not_gfortran ]]; then
      export todo=in
    else
      echo unrecognized argument \"$1\" given to $0
      echo valid args are either \"-gfortran\" or \"-not_gfortran\"
      exit 1
    fi

  else
    # too many arguments, give an error message and exit
    echo invalid usage, more than 1 argument given to $0
    echo only one of either \"-gfortran\" or \"-not_gfortran\" can be specified
    exit 1
  fi
  
  # if we are already in the right state, loop to next file
  if [[ $before == out && $todo == out ]]; then continue; fi
  if [[ $before == in  && $todo == in  ]]; then continue; fi
  
  # we do have something do to

  # save original copy for backup if one does not already exist.
  if [[ ! -f ${f}.orig ]]; then
    cp -p ${f} ${f}.orig
  fi
  
  # removing comment chars, enabling interface block code
  if [[ $todo == in ]]; then
   echo Setting for a non-gfortran compiler in ${f}
   mv ${f} tempfile
   sed -e '/SYSTEM_BLOCK_EDIT START COMMENTED_OUT/,/SYSTEM_BLOCK_EDIT END COMMENTED_OUT/s/^!//' \
       -e '/\(SYSTEM_BLOCK_EDIT [A-Z][A-Z]*\) COMMENTED_OUT/s//\1 COMMENTED_IN/' tempfile > ${f}
  fi
  
  # adding comment chars, disabling interface block code
  if [[ $todo == out ]]; then
   echo Setting for gfortran compiler in ${f}
   mv ${f} tempfile
   sed -e '/SYSTEM_BLOCK_EDIT START COMMENTED_IN/,/SYSTEM_BLOCK_EDIT END COMMENTED_IN/s/^/!/' \
       -e '/\(SYSTEM_BLOCK_EDIT [A-Z][A-Z]*\) COMMENTED_IN/s//\1 COMMENTED_OUT/' tempfile > ${f}
  fi

  \rm -f tempfile

done

exit 0

# <next few lines under version control, do not edit>
# $URL$
# $Revision$
# $Date$

