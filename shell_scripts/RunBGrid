#!/bin/csh
#
# script to run an experiment with existing intial conditions
#======================================================================
# Find the project and build it, if need be.
#======================================================================

if ( ${?DART_HOME} ) then
   if ( -d $DART_HOME ) then
      setenv DARTHOME $DART_HOME
   else
      echo "$DART_HOME does not exist on this platform"
   endif
else if ( -d /export/data/gsp/${USER}/DART ) then
   setenv DARTHOME /export/data/gsp/${USER}/DART
else if ( -d /data/gsp/${USER}/DART ) then
   setenv DARTHOME /data/gsp/${USER}/DART
else if ( -d /home/${USER}/DART ) then
   setenv DARTHOME /home/${USER}/DART
else
   echo "no DART project"
   exit
endif
echo "DART project directory is $DARTHOME"
sleep 2

set Model = bgrid_solo

cd ${DARTHOME}/models/${Model}/work

if !( -e column_rand ) then    ;# interactively builds a set of randomly-
   csh mkmf_column_rand        ;# located column observations
   make || exit 1              ;# specify 5 vertical levels
endif                          ;# create_obs_set_def < column_rand.out
if !( -e ps_rand_local ) then  ;# randomly-located surface pressure obs
   csh mkmf_ps_rand_local      ;# can be confined to a lat/lon rectangle
   make || exit 2              ;# create_obs_set_def < ps_rand.out
endif
if !( -e create_obs_set_def ) then
   csh mkmf_create_obs_set_def
   make || exit 3
endif
if !( -e create_obs_sequence ) then
   csh mkmf_create_obs_sequence
   make || exit 4
endif
if !( -e perfect_model_obs ) then
   csh mkmf_perfect_model_obs
   make || exit 5
endif
if !( -e filter ) then
   csh mkmf_filter
   make || exit 6
endif
\rm -f *.o *.d *.mod Makefile

set SAVEME = input.nml.$$
set NICELEVEL = +3

if ( -f input.nml ) then
   mv input.nml $SAVEME
endif

cat << ENDofTask01 > input.nml
&main_nml
   days                =   10,
   dt_atmos            = 3600,
   output_state_vector = .false.
&end

&fms_nml
   domains_stack_size = 90000
&end

&bgrid_cold_start_nml
   nlon = 60, 
   nlat = 30, 
   nlev =  5,
   equal_vert_spacing = .true.
&end

&hs_forcing_nml
   delh      =  60.,
   t_zero    = 315.,
   t_strat   = 200.,
   delv      =  10.,
   eps       =   0.,
   ka        = -40.,
   ks        =  -4.,
   kf        =  -1.,
   sigma_b   =  .7,
   do_conserve_energy = .false.
&end

&bgrid_core_driver_nml
   damp_coeff_wind     = 0.10,
   damp_coeff_temp     = 0.10,
   damp_coeff_tracer   = 0.10,
   advec_order_wind    = 4,
   advec_order_temp    = 2,
   advec_order_tracer  = 2,
   num_sponge_levels   = 1,
   sponge_coeff_wind   = 1.00,
   sponge_coeff_temp   = 1.00,
   sponge_coeff_tracer = 1.00,
   num_fill_pass       = 2,
   decomp              = 0,0,
   num_adjust_dt       = 3,
   num_advec_dt        = 3,
   halo                = 1,
   do_conserve_energy  = .false.
&end

&bgrid_integrals_nml
   file_name       = 'dynam_integral.out',
   time_units      = 'days',
   output_interval = 1.00
&end
ENDofTask01

#======================================================================
# Simulate a particular observing system:
# 1) declare an observation set definition
#======================================================================

echo "1800          of observations"                  > ps_rand_local.in
echo "10000  Pa     obs error variance (10,000=1mb)" >> ps_rand_local.in
echo "-90           lower latitude [-90,xxx]"        >> ps_rand_local.in
echo " 90           upper latitude [xxx, 90]"        >> ps_rand_local.in
echo "  0           west longitude [0,360]"          >> ps_rand_local.in
echo "360           east longitude [0,360]"          >> ps_rand_local.in

./ps_rand_local < ps_rand_local.in

./create_obs_set_def < ps_rand.out

if ( $status > 0 ) then
   echo "ERROR: running create_obs_set_def bombed ..."
   exit
endif

#======================================================================
# "Suggested first 
# 1) declare an observation set definition
#======================================================================
echo "Running column rand case ..."

echo "400           # of observations"                > column_rand.in
echo "5             model levels "                   >> column_rand.in
echo "10000  Pa     obs error variance (10,000=1mb)" >> column_rand.in
echo "1.0           T obs error variance"            >> column_rand.in
echo "1.0           U,V obs error variance"          >> column_rand.in

./column_rand < column_rand.in
./create_obs_set_def < column_rand.out

if ( $status > 0 ) then
   echo "ERROR: running create_obs_set_def bombed ..."
   exit
endif

#======================================================================
# Simulate a particular observing system:
# 2) declare sequences of observation sets
# 21600 -> every  6 hours
# 43200 -> every 12 hours
#======================================================================

set      num_obs = 10
set     ob_day_1 = 0
set ob_seconds_1 = 43200

if ( ${?NumObs} ) then
   set num_obs = $NumObs
endif
if ( ${?ObDay1} ) then
   set ob_day_1 = $ObDay1
endif
if ( ${?ObSec1} ) then
   set ob_seconds_1 = $ObSec1
endif

echo "set_def.out"            > create_obs_sequence.in
echo "1"                     >> create_obs_sequence.in
echo $num_obs                >> create_obs_sequence.in
echo $ob_day_1 $ob_seconds_1 >> create_obs_sequence.in
echo $ob_day_1 $ob_seconds_1 >> create_obs_sequence.in
echo "obs_seq.in"            >> create_obs_sequence.in

./create_obs_sequence < create_obs_sequence.in

if ( $status > 0 ) then
   echo "ERROR: create_obs_sequence bombed ..."
   exit
endif

#======================================================================
# Simulate a particular observing system
# 3) Populate the observation sequences with synthetic observations
#    creates files True_State.nc, obs_seq.out
#======================================================================

cat << ENDofTask03 > perfect.nml
&perfect_model_obs_nml
   async                 = .false.,
   obs_seq_in_file_name  = "obs_seq.in",
   obs_seq_out_file_name = "obs_seq.out",
   start_from_restart    = .true.,
   output_restart        = .true.,
   restart_in_file_name  = "perfect_ics",
   restart_out_file_name = "perfect_restart",
   init_time_days        = 0,
   init_time_seconds     = 0,
   output_interval       = 1
&end
ENDofTask03

cat perfect.nml >> input.nml

nice $NICELEVEL ./perfect_model_obs
 
if ( $status > 0 ) then
   echo "ERROR: perfect_model_obs (synthetic) bombed ..."
   exit
else
   echo " "
   echo "perfect_model_obs (synthetic) teminated normally"
   echo " "
endif

#======================================================================
# Simulate a particular observing system
# 4) Filter
#    creates files Prior_Diag.nc, Posterior_Diag.nc
#======================================================================
# Set defaults
#======================================================================

set async = .false.
set ens_size = 20
set cutoff = 0.2
set cov_inflate = 1.00
set start_from_restart = .true.
set output_restart = .true.
set obs_sequence_file_name = '"obs_seq.out"'
set restart_in_file_name = '"filter_ics"'
set restart_out_file_name = '"filter_restart"'
set init_time_days = 0
set init_time_seconds = 0
set output_state_ens_mean = .true.
set output_state_ens_spread = .true.
set num_output_ens_members = 10
set output_interval = 1

if ( ${?EnsSize} ) then
   set ens_size = $EnsSize
endif
if ( ${?NumOutputEnsMembers} ) then
   set num_output_ens_members = $NumOutputEnsMembers
endif
if ( ${?CovInflate} ) then
   set cov_inflate = $CovInflate
endif
if ( ${?Cutoff} ) then
   set cutoff = $Cutoff
endif

echo " "                                                        > filter.nml
echo "&filter_nml"                                             >> filter.nml
echo "   async = $async ,"                                     >> filter.nml
echo "   ens_size = $ens_size ,"                               >> filter.nml
echo "   cutoff = $cutoff ,"                                   >> filter.nml
echo "   cov_inflate = $cov_inflate ,"                         >> filter.nml
echo "   start_from_restart = $start_from_restart ,"           >> filter.nml
echo "   output_restart = $output_restart ,"                   >> filter.nml
echo "   obs_sequence_file_name = $obs_sequence_file_name ,"   >> filter.nml
echo "   restart_in_file_name = $restart_in_file_name ,"       >> filter.nml
echo "   restart_out_file_name = $restart_out_file_name ,"     >> filter.nml
echo "   init_time_days = $init_time_days ,"                   >> filter.nml
echo "   init_time_seconds = $init_time_seconds ,"             >> filter.nml
echo "   output_state_ens_mean = $output_state_ens_mean ,"     >> filter.nml
echo "   output_state_ens_spread = $output_state_ens_spread ," >> filter.nml
echo "   num_output_ens_members = $num_output_ens_members ,"   >> filter.nml
echo "   output_interval = $output_interval "                  >> filter.nml
echo "&end"                                                    >> filter.nml
echo " "                                                       >> filter.nml

cat filter.nml >> input.nml

nice $NICELEVEL ./filter

if ( $status > 0 ) then
   mv $SAVEME input.nml
   echo "ERROR: filter bombed ..."
   exit
else
   echo " "
   echo "filter teminated normally"
   echo " "
#   \rm -f create_obs_set_def.in create_obs_sequence.in input.nml filter.nml
endif

if ( -f $SAVEME ) then
   mv $SAVEME input.nml
endif

exit
