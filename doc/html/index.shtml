<HTML>
<HEAD>
<TITLE>DART start</TITLE>
<BODY BGCOLOR="#EEEEEE">

<H1>Things the DART need to know.</H1>

For the purpose of simplicity, I am assuming you will be creating your
<TT>DART</TT> sandbox on a machine that need not be in CGD. It the 
machine IS inside CGD, the directions do not change 
(but this is a bit of overkill).

<P> I have named the project repository <TT>DART</TT> so when you check 
out the repository, your sandbox will be installed in a directory also 
called <TT>DART</TT>. You can sue me later. At this point, it is in
my home directory, we will move it when the RAID array is operational.
[That should be a momentary inconvenience.] Since it is in my home
directory, I would ask that you not add any large files to the repository,
such as object or data files. At this time, I have about 300MB of space
and the current project is about 3+MB; so I don't really envision
this to be a problem any time soon.

<P><b>Hmnnnnn</b> how does the group enter into play?   
<PRE>newgrp cgddart</PRE>


<H2>To create your sandbox</H2>
This presumes you have a valid account on goldhill and are running csh
on your sandbox machine. From your sandbox machine: 
<PRE>setenv CVSROOT :ext:goldhill.cgd.ucar.edu:/home/thoar/CVS.REPOS
setenv CVS_RSH ssh
cvs co DART</PRE>

The first two commands can be (should be) put in your dotfiles.
If you are using multiple CVS repositories, you can obviate the need
to keep switching your CVSROOT variable by using a different form of the
"checkout" command:  

<PRE>setenv CVS_RSH ssh
cvs -d :ext:goldhill.cgd.ucar.edu:/home/thoar/CVS.REPOS co DART</PRE>

Once the sandbox is created, CVS internally tracks the location of the
repostitory (I am told ).

<P>Either way, the most current state of the repository is replicated 
in your current working directory as a directory called <TT>DART</TT>.
Edit away.

<P>The current "tag" of the project is <TT>rel-0-0</TT>&nbsp. 
We need to come up with a policy regarding when to "commit" a 
sandbox to the repository. (i.e. does it need to pass a test suite...)

<P>
<A HREF="http://www.cgd.ucar.edu/~thoar/cvs_primer.html">my cheat-sheet of CVS commands</A>

<H2>Style points <FONT size=-1>all of which are worth beer</FONT></H2>
I can think of no reason why the 
<A HREF="http://www.cgd.ucar.edu/cms/ccm4/codingstandard.shtml">
CCM4 Coding Standard</A> should not work for us. I don't want
to keep making cosmetic changes to the code, so we might as well
do it the same way from the start. 

<OL><LI>Indent by three spaces
    <LI>separate full-line comments by a line of whitespace on each side
    <LI>Comment lines should be properly indented
</OL>

<H2>To compile</H2>
Right now, there is a script <TT>compile_it</TT> that does the heavy lifting.
It is currently configured to be run from the <TT>work</TT> directory.
<TT>../compile_it</TT> ingests <TT>path_names_for_modules</TT> which has
(in addition to a bunch of PATHS) the compile directives for the project.
<TT>path_names_for_modules</TT> is fundamentally a menu. Uncomment the
chunks you want. As you explore new platforms, please update the compile options.  

<PRE>
cd DART/work
vi path_names_for_modules       <FONT COLOR="#ff0000">;# uncomment items</FONT>
../compile_it <FONT COLOR="#0000FF">seq_obs</FONT>           <FONT COLOR="#ff0000">;# for example</FONT>
./seq_obs <FONT COLOR="#0000FF">| tee seq_obs.log</FONT>     <FONT COLOR="#ff0000">;# if you want to get fancy</FONT></PRE>

Jeff claims you can use any of the (case-insensitive) versions of any of the shell
variables in <TT>path_names_for_modules</TT> as the argument to <TT>compile_it</TT>.

<P>I am exploring Brian Eaton's perl scripts to facilitate the build.
/fs/cgd/home0/eaton/bin/mkSrcfiles<BR>
/fs/cgd/home0/eaton/bin/mkDepends<BR> 
ingest a file that contains F90 pathnames and generates a makefile with
the proper dependencies, as long as the module names are consistent with
the filenames containing the module.

<A HREF="http://www.gnu.org/software/autoconf/">autoconf</A> 
to generate the makefile. Will explore ... after I understand the 
staus quo "build" procedure.

<P>Really want to use 
<A HREF="http://www.gnu.org/software/autoconf/">autoconf</A> 
to generate the makefile. Will explore ... after I understand the 
staus quo "build" procedure.

<H3>Assimilation sequence</H3>
<OL><LI>model_mod
       <OL><LI>init_model()
          <LI>get_model_size()
          <LI>init_conditions()
          <LI>adv_1step()
             <OL><LI>adv_true_state(x)
             </OL>
          <LI>advance()
       </OL>
    <LI>model_output(x,time)
    <LI>diag_output_index(1:9)
    <LI>get_close_pts ... `distance'
    <LI>state_loc ... array of meta_data
</OL>

<P>
<HR>
<P>
Document: <!--#echo var="DOCUMENT_URI" --> <BR>
Last modified: <!--#echo var="LAST_MODIFIED" --> <BR>
<a href="mailto:thoar@ucar.edu">Tim Hoar - thoar@ucar.edu</a>
</BODY>
</HTML>
